% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/nano_varimp.R
\name{nano_varimp}
\alias{nano_varimp}
\title{Calculate and Plot Variable Importance}
\usage{
nano_varimp(
  nano,
  model_no = NA,
  plot = TRUE,
  n_var = 10,
  subtitle = NA,
  save = FALSE,
  subdir = NA,
  file_name = "viz_importance.png"
)
}
\arguments{
\item{nano}{nano object containing models}

\item{model_no}{the position of the model in the list of models in the nano object. If not
entered, the last model is taken by default.}

\item{plot}{a logical specifying whether the variable importance should be plotted.}

\item{n_var}{only relevant if \code{plot = TRUE}. Specifies the maximum number of variables
which should be shown in the plot.}

\item{subtitle}{subtitle for the plot.}

\item{save}{a logical specifying whether the plot should be saved into working directory.}

\item{subdir}{sub directory in which the plot should be saved.}

\item{file_name}{file name of the saved plot.}
}
\value{
nano object with variable importance of specified model calculated. Also returns a plot
if \code{plot = TRUE}.
}
\description{
Calculates and plots variable importance of model in nano object.
}
\details{
Function first checks if the variable importance of the specified model has already
been calculated (by checking in the list \code{nano$varimp}). If it has not been calculated,
then the variable importance will be calculated and the relevant slot in \code{nano$varimp}
will be filled out.

If \code{plot = TRUE}, a plot of the variable importance will also be returned. The plot can
be saved in a subfolder of the working directory by using the \code{save} and \code{subdir} arguments.
}
\examples{
\dontrun{
if(interactive()){
 library(h2o)
 library(nano)
 
 h2o.init()
 
 # import dataset
 data(property_prices)
 train <- as.h2o(property_prices)
 
 # set the response and predictors
 response <- "sale_price"
 var <- setdiff(colnames(property_prices), response)
 
 # build grids
 grid_1 <- h2o.grid(x               = var,
                    y               = response,
                    training_frame  = train,
                    algorithm       = "randomForest",
                    hyper_params    = list(ntrees = 1:2),
                    nfolds          = 3,
                    seed            = 628)

 obj <- create_nano(grid = list(grid_1),
                    data = list(property_prices),  
                    ) # since model is not entered, will take best model from grid
 
 # calculate varimp
 nano <- nano_varimp(nano = nano, model_no = 1, plot = FALSE)
 
 }
}
}
